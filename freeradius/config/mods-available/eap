# -*- text -*-
##
##  eap.conf -- Configuration for EAP types (PEAP, TTLS, etc.)
##
##	$Id: ee9e539a239a432dff7892efc3d57411bddd58cb $

#######################################################################
#
eap {
	default_eap_type = tls
	timer_expire = 60
	ignore_unknown_eap_types = no
	max_sessions = ${max_requests}
	
	tls-config tls-common {
		private_key_password = yoursuperstrongkeyencryptionpassword
		private_key_file = ${certdir}/server.key
		certificate_file = ${certdir}/server.pem
#		ca_file = ${cadir}/ca.pem
		ca_path = ${cadir}

		# OpenSSL does not reload contents of ca_path dir over time.
		# That means that if check_crl is enabled and CRLs are loaded
		# from ca_path dir, at some point CRLs will expire and
		# the server will stop authenticating users.
		#
		# If ca_path_reload_interval is non-zero, it will force OpenSSL
		# to reload all data from ca_path periodically
		#
		# Flush ca_path each hour
	#	ca_path_reload_interval = 3600

		#  If OpenSSL supports TLS-PSK, then we can use a
		#  fixed PSK identity and (hex) password.  These can
		#  be used at the same time as the certificate
		#  configuration, but only for TLS 1.0 through 1.2.
		#
		#  If PSK and certificates are configured at the same
		#  time for TLS 1.3, then the server will warn you,
		#  and will disable TLS 1.3, as it will not work.
		#
		#  The work around is to have two modules (or for
		#  RadSec, two listen sections).  One will have PSK
		#  configured, and the other will have certificates
		#  configured.
		#
	#	psk_identity = "test"
	#	psk_hexphrase = "036363823"

		#  Check the Certificate Revocation List
		#
		#  1) Copy CA certificates and CRLs to same directory.
		#  2) Execute 'c_rehash <CA certs&CRLs Directory>'.
		#     'c_rehash' is OpenSSL's command.
		#  3) uncomment the lines below.
		#  5) Restart radiusd
	#	check_crl = yes

		# Check if intermediate CAs have been revoked.
	#	check_all_crl = yes

		# Accept an expired Certificate Revocation List
		#
	#	allow_expired_crl = no


		#
		#  This configuration item only applies when there is
		#  an intermediate CA between the "root" CA, and the
		#  client certificate.  If we trust the root CA, then
		#  by definition we also trust ANY intermediate CA
		#  which is signed by that root.  This means ANOTHER
		#  intermediate CA can issue client certificates, and
		#  have them accepted by the EAP module.
		#
		#  The solution is to list ONLY the trusted CAs in the
		#  FreeRADIUS configuration, and then set this
		#  configuration item to "yes".
		#
		#  Then, when the server receives a client certificate
		#  from an untrusted CA, that authentication request
		#  can be rejected.
		#
		#  It is possible to do these checks in "unlang", by
		#  checking for unknown names in the
		#  TLS-Cert-Common-Name attribute, but that is
		#  more complex.  So we add a configuration option
		#  which can be set once, and which works for all
		#  possible intermediate CAs, no matter what their
		#  value.
		#
	#	reject_unknown_intermediate_ca = no

		cipher_list = "DEFAULT"

		cipher_server_preference = no

		tls_min_version = "1.2"
		tls_max_version = "1.2"

		ecdh_curve = ""

		#  Session resumption / fast reauthentication
		#  cache.
		#
		#  The cache contains the following information:
		#
		#   session Id - unique identifier, managed by SSL
		#   User-Name  - from the Access-Accept
		#   Stripped-User-Name - from the Access-Request
		#   Cached-Session-Policy - from the Access-Accept
		#
		#  See also the "store" subsection below for
		#  additional attributes which can be cached.
		#
		#  The "Cached-Session-Policy" is the name of a
		#  policy which should be applied to the cached
		#  session.  This policy can be used to assign
		#  VLANs, IP addresses, etc.  It serves as a useful
		#  way to re-apply the policy from the original
		#  Access-Accept to the subsequent Access-Accept
		#  for the cached session.
		#
		#  On session resumption, these attributes are
		#  copied from the cache, and placed into the
		#  reply list.
		#
		#  You probably also want "use_tunneled_reply = yes"
		#  when using fast session resumption.
		#
		#  You can check if a session has been resumed by
		#  looking for the existence of the EAP-Session-Resumed
		#  attribute.  Note that this attribute will *only*
		#  exist in the "post-auth" section.
		#
		#  CAVEATS: The cache is stored and reloaded BEFORE
		#  the "post-auth" section is run.  This limitation
		#  makes caching more difficult than it should be.  In
		#  practice, it means that the first authentication
		#  session must set the reply attributes before the
		#  post-auth section is run.
		#
		#  When the session is resumed, the attributes are
		#  restored and placed into the session-state list.
		#
		cache {
			#  Enable it.  The default is "no". Deleting the entire "cache"
			#  subsection also disables caching.
			#
			#  The session cache requires the use of the
			#  "name" and "persist_dir" configuration
			#  items, below.
			#
			#  The internal OpenSSL session cache has been permanently
			#  disabled.
			#
			#  You can disallow resumption for a particular user by adding the
			#  following attribute to the control item list:
			#
			#    Allow-Session-Resumption = No
			#
			#  If "enable = no" below, you CANNOT enable resumption for just one
			#  user by setting the above attribute to "yes".
			#
			enable = no

			#  Lifetime of the cached entries, in hours. The sessions will be
			#  deleted/invalidated after this time.
			#
			lifetime = 24 # hours

			#  Internal "name" of the session cache. Used to
			#  distinguish which TLS context sessions belong to.
			#
			#  The server will generate a random value if unset.
			#  This will change across server restart so you MUST
			#  set the "name" if you want to persist sessions (see
			#  below).
			#
		#	name = "EAP module"

			#  Simple directory-based storage of sessions.
			#  Two files per session will be written, the SSL
			#  state and the cached VPs. This will persist session
			#  across server restarts.
			#
			#  The default directory is ${logdir}, for historical
			#  reasons.  You should ${db_dir} instead.  And check
			#  the value of db_dir in the main radiusd.conf file.
			#  It should not point to ${raddb}
			#
			#  The server will need write perms, and the directory
			#  should be secured from anyone else. You might want
			#  a script to remove old files from here periodically:
			#
			#    find ${logdir}/tlscache -mtime +2 -exec rm -f {} \;
			#
			#  This feature REQUIRES "name" option be set above.
			#
		#	persist_dir = "${logdir}/tlscache"

			#
			#  It is possible to partially
			#  control which attributes exist in the
			#  session cache.  This subsection lists
			#  attributes which are taken from the reply,
			#  and saved to the on-disk cache.  When the
			#  session is resumed, these attributes are
			#  added to the "session-state" list.  The
			#  default configuration will then take care
			#  of copying them to the reply.
			#
			store {
				Tunnel-Private-Group-Id
			}
		}

		verify {
		}
	}


	#  EAP-TLS
	#
	#  The TLS configuration for TLS-based EAP types is held in
	#  the "tls-config" section, above.
	#
	tls {
		tls = tls-common
	}


}
